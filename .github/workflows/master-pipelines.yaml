name: CI/CD MPW-front

# Uniquement dans le cadre d'un push sur master
on:
  push:
    branches: 
      - "*"

jobs:
  install:
    name: Verify Dependency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci

  build:
    name: Build app
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci
      - name: Build app
        run: npm run build

  lint:
    name: Verify code practice
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci
      - name: Test lint
        run: npm run liny

  test:
    name: Verify Unit Tests
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci
      - name: Unit test
        run: npm run test

  deploy:
    name: Deploy on EC2
    needs: [build, lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # S'exécute uniquement sur la branche master
    steps:
      # Clonez le dépôt
      - name: Checkout code
        uses: actions/checkout@v3
      # Configurez l'accès SSH à l'EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      # Construisez votre application
      - name: Build application
        run: |
          npm install
          npm run build
      # Autorise l'action github
      - name: Add host to known_hosts
        run: ssh-keyscan -H ${{ secrets.APP_EC2_IP }} >> ~/.ssh/known_hosts
      # Déployez les fichiers sur l'instance EC2
      - name: Deploy to EC2
        run: |
          scp -r ./dist/* ubuntu@${{ secrets.APP_EC2_IP }}:${{ secrets.APP_EC2_PATH }}
          ssh ubuntu@${{ secrets.APP_EC2_IP }} 'sudo systemctl restart nginx'
